<#@ template language="C#" hostspecific="True" debug="true"#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@include file="MultipleOutputHelper.txt"#>
<#@ output extension=".txt" #>
<# var manager = Manager.Create(Host, GenerationEnvironment); #>

<# manager.StartHeader(); #>
// Code generated by a template
using System;
using System.ComponentModel.DataAnnotations;

namespace Model
{
<# manager.EndBlock(); #>
 
<# manager.StartFooter(); #>

}
// It's the end
<# manager.EndBlock(); #>

<#
    string connectionName="mssqlmaster";
    //System.Diagnostics.Debugger.Launch();
    string configPath=Host.ResolveAssemblyReference("$(ProjectDir)")+"app.config";
    var configPathMap=new System.Configuration.ExeConfigurationFileMap(){ExeConfigFilename=configPath};
    var appConfig=System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configPathMap, System.Configuration.ConfigurationUserLevel.None);
    var connSection= appConfig.GetSection("connectionStrings") as System.Configuration.ConnectionStringsSection;  
    string cnnstr= connSection.ConnectionStrings[connectionName].ConnectionString;
	using (var cnn = new System.Data.SqlClient.SqlConnection(cnnstr))
    {
        cnn.Open();
        List<string> lstTableName = new List<string>();
        using (var cmd = cnn.CreateCommand())
        {
            cmd.CommandText = "select TABLE_NAME from INFORMATION_SCHEMA.TABLES where TABLE_TYPE='BASE TABLE' ORDER BY TABLE_NAME";
            using (var reader = cmd.ExecuteReader())
            {
                while (reader.Read())
                {
                    lstTableName.Add(reader.GetString(0));
                }
            }
        }
        foreach (string nameClass in lstTableName)
        {
            manager.StartNewFile(nameClass + ".cs");
            this.WriteLine(string.Format("{0}public partial class {1}", new String(' ', 4), nameClass));
            this.WriteLine(new String(' ', 4) + "{");
            System.Data.DataTable schemaTable;
            using (var cmd = cnn.CreateCommand())
            {
                cmd.CommandText = string.Format("select * from [{0}]",nameClass);
                using (var reader = cmd.ExecuteReader(System.Data.CommandBehavior.KeyInfo | System.Data.CommandBehavior.SchemaOnly))
                {
                    schemaTable = reader.GetSchemaTable();
                }
            }
            System.Data.DataTable commentTable=new System.Data.DataTable("rt");
            using (var cmd = cnn.CreateCommand())
            {
                cmd.CommandText = string.Format("with htt as({0}),gmm as ({1}) select htt.name,gmm.value from htt left join gmm on htt.column_id=gmm.minor_id",
                        "select * from sys.columns where object_id=OBJECT_ID('" + nameClass + "')",
                        "select * from sys.extended_properties where sys.extended_properties.major_id=OBJECT_ID('" + nameClass + "')");
                using (var adapter=new System.Data.SqlClient.SqlDataAdapter(cmd))
                {
                    adapter.Fill(commentTable);
                }
            }
            foreach (System.Data.DataRow row in schemaTable.Select())
            {
                string colName = row["ColumnName"].ToString();
                int columnSize = Convert.ToInt32(row["ColumnSize"]);
                string colType = row["DataType"].ToString().Substring("System.".Length);
                bool allowDBNull = Convert.ToBoolean(row["AllowDBNull"]);
                bool isKey=Convert.ToBoolean(row["IsKey"]);
                if (allowDBNull && !colType.Equals("String") && !colType.Equals("Byte[]"))
                    colType = "Nullable<" + colType + ">";
                if (colName.EndsWith("Enum"))
                    colType = colName.Substring(0, colName.Length - "Enum".Length) + "Index";
                string comment = commentTable.Select("name='" + colName + "'")[0]["value"].ToString().Replace("\r\n", " ").Replace("\n", " ").Replace("\n", " ");
                this.WriteLine(string.Format("{0}/// <summary>",new String(' ', 8)));
                this.WriteLine(string.Format("{0}///{1}", new String(' ', 8), comment));
                this.WriteLine(string.Format("{0}/// </summary>", new String(' ', 8)));
                if(!allowDBNull && colType.Equals("String"))
                    this.WriteLine(string.Format("{0}[Required]",new String(' ',8)));
                if(colType.Equals("String") && columnSize<int.MaxValue && columnSize>0)
                    this.WriteLine(string.Format("{0}[StringLength({1})]",new String(' ',8),columnSize));
                if(isKey)
                    this.WriteLine(string.Format("{2}[Key]",row["ColumnSize"],allowDBNull.ToString().ToLower(),new String(' ',8)));
                        
                this.WriteLine(string.Format("{0}public {1} {2} {3}", new String(' ', 8), colType, colName, "{set;get;}"));
            }
            this.WriteLine(new String(' ', 4) + "}");
            manager.EndBlock();
        }
    }
#>
<# manager.Process(true); #> 